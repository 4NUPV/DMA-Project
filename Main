library(shiny)
library(ggplot2)
library(dplyr)
library(forecast)
library(randomForest)
library(shinythemes)       # for colorful themes
library(shinycssloaders)   # for animated loaders

# -------------------------------
# Load Dataset
# -------------------------------
csv_url <- "https://raw.githubusercontent.com/4NUPV/DMA-Project/main/annual.csv"
gold_data <- read.csv(csv_url)
gold_data$Year <- as.numeric(gold_data$Date)
gold_data$Price <- as.numeric(gold_data$Price)
gold_data_recent <- gold_data[gold_data$Year >= 2000, ]

# -------------------------------
# UI
# -------------------------------
ui <- fluidPage(
  theme = shinytheme("cosmo"),   # try "cosmo", "superhero", "cerulean"
  
  tags$head(
    tags$link(rel = "stylesheet", 
              href = "https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css")
  ),
  
  titlePanel(
    div(class = "animate__animated animate__fadeInDown",
        "🌟 Gold Price Prediction & Forecasting 🌟")
  ),
  
  sidebarLayout(
    sidebarPanel(
      h4("Enter Economic Indicators"),
      numericInput("usd", "💵 USD Index:", value = 100, min = 80, max = 120),
      numericInput("oil", "🛢 Oil Price (USD):", value = 70, min = 30, max = 150),
      numericInput("inflation", "📈 Inflation Rate (%):", value = 3, min = 0, max = 15),
      numericInput("interest", "🏦 Interest Rate (%):", value = 2, min = 0, max = 10),
      actionButton("predict", "🔮 Predict Gold Price", class = "btn btn-primary"),
      hr(),
      numericInput("forecast_horizon", "📅 Forecast Years Ahead:", value = 10, min = 1, max = 50),
      actionButton("forecast", "📊 Run ARIMA Forecast", class = "btn btn-success")
    ),
    
    mainPanel(
      tabsetPanel(
        tabPanel("Prediction Results",
                 h3("Model Predictions"),
                 withSpinner(verbatimTextOutput("model_results"), type = 6, color = "#FF5733")
        ),
        tabPanel("ARIMA Forecast",
                 h3("Forecast Plot"),
                 withSpinner(plotOutput("forecast_plot", height = "500px"), type = 8, color = "#337ab7")
        )
      )
    )
  )
)

# -------------------------------
# SERVER
# -------------------------------
server <- function(input, output) {
  
  observeEvent(input$predict, {
    # Train models
    set.seed(123)
    gold_data_recent$USD_Index <- runif(nrow(gold_data_recent), 90, 110)
    gold_data_recent$Oil_Price <- runif(nrow(gold_data_recent), 50, 100)
    gold_data_recent$Inflation <- runif(nrow(gold_data_recent), 2, 8)
    gold_data_recent$Interest_Rate <- runif(nrow(gold_data_recent), 0.5, 5)
    
    lm_model <- lm(Price ~ USD_Index + Oil_Price + Inflation + Interest_Rate, data = gold_data_recent)
    rf_model <- randomForest(Price ~ USD_Index + Oil_Price + Inflation + Interest_Rate,
                             data = gold_data_recent, ntree = 200)
    
    new_data <- data.frame(
      USD_Index = input$usd,
      Oil_Price = input$oil,
      Inflation = input$inflation,
      Interest_Rate = input$interest
    )
    
    lm_pred <- predict(lm_model, new_data)
    rf_pred <- predict(rf_model, new_data)
    
    output$model_results <- renderPrint({
      cat("✨ Linear Regression Prediction: ", round(lm_pred, 2), " USD/oz\n")
      cat("🌲 Random Forest Prediction: ", round(rf_pred, 2), " USD/oz\n")
    })
  })
  
  observeEvent(input$forecast, {
    gold_ts <- ts(gold_data_recent$Price, start = min(gold_data_recent$Year), frequency = 1)
    arima_model <- auto.arima(gold_ts)
    gold_forecast <- forecast(arima_model, h = input$forecast_horizon)
    
    forecast_years <- (max(gold_data_recent$Year)+1):(max(gold_data_recent$Year)+input$forecast_horizon)
    forecast_df <- data.frame(
      Year = forecast_years,
      Predicted = as.numeric(gold_forecast$mean),
      Lower = as.numeric(gold_forecast$lower[,2]),
      Upper = as.numeric(gold_forecast$upper[,2])
    )
    
    historical_df <- data.frame(
      Year = gold_data_recent$Year,
      Price = gold_data_recent$Price
    )
    
    output$forecast_plot <- renderPlot({
      ggplot() +
        geom_line(data = historical_df, aes(x = Year, y = Price), color = "#444444", size = 1.2) +
        geom_line(data = forecast_df, aes(x = Year, y = Predicted), color = "#0073e6", size = 1.2) +
        geom_ribbon(data = forecast_df, aes(x = Year, ymin = Lower, ymax = Upper),
                    alpha = 0.2, fill = "#66b2ff") +
        labs(title = "🔮 Gold Price Forecast", x = "Year", y = "Gold Price (USD)") +
        theme_minimal(base_size = 14)
    })
  })
}

# -------------------------------
# Run App
# -------------------------------
shinyApp(ui = ui, server = server)
